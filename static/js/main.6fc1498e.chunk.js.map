{"version":3,"sources":["components/Header.js","components/InputTodo.js","components/TodoItem/TodoItem.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","textAlign","margin","color","marginBottom","InputTodo","state","title","correctLenght","onChangeHandler","e","setState","target","value","onSubmitHandler","preventDefault","props","addTodoItem","action","onSubmit","this","className","type","placeholder","onChange","minLength","Component","TodoItem","checked","completed","handleChange","id","onClick","deleteTodoHandler","TodoContainer","todos","uuidv4","onChangeCheckbox","updatedTodosArr","map","todo","addToDoItem","console","log","newTodo","unshift","updatedTodoArr","filter","key","React","App","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6fc1498e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n\n    const h1Style = {textAlign: \"center\", margin: \"30px\",  color: \"gray\"}\n    \n    return (\n        <header>\n            <h1 style={ h1Style }>To Do App</h1>\n            <p style={ {marginBottom: \"15px\"} }>Add, Edit or Delete a Todo Item.</p>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react'\n\n\nclass InputTodo extends Component { \n\n    state = {\n        title: \"\",\n        correctLenght: true\n    };\n\n    onChangeHandler = (e) => {\n        // console.log('Input changed', e.target);\n        this.setState({\n            title: e.target.value\n        })\n    }\n\n    onSubmitHandler = (e) => {\n        e.preventDefault();\n        // console.log(this.state.title);\n        this.props.addTodoItem(this.state.title);\n        this.setState({\n            title: \"\"\n        });\n\n        // correct length\n        // if(this.state.title.length >3 && this.state.title.length < 25 ) {\n        //     this.props.addTodoItem(this.state.title);\n            \n        //     this.setState({\n        //         title: \"\",\n        //         correctLength: true\n        //     });\n        // } else { \n        //     this.setState({\n        //         correctLength: false\n        //     });\n        // }\n\n    }\n\n    render() { \n    return (\n        <form action=\"\" onSubmit={this.onSubmitHandler} className=\"form\">\n        <input className=\"input-text\" type=\"text\" placeholder=\"ToDo...\" value={this.state.title} onChange={ this.onChangeHandler } minLength=\"3\"/>\n        <input className=\"input-submit\" type=\"submit\" value=\"hinzufÃ¼gen\"/>\n        {this.state.correctLenght ? null : <p>Dein ToDo muss zwischen 2 und 25Zeichen lang sein!</p>}\n        </form>\n    \n    );\n} \n}\n\nexport default InputTodo;\n","import React from \"react\"\nimport './TodoItem.scss';\n\nconst TodoItem = (props) => {\n\n    const completedStyle = {\n        fontStyle: \"italic\",\n        color: \"#d35e0f\",\n        opacity: 0.4,\n        textDecoration: \"line-through\",\n      }\n\n    return (\n        <li className=\"todo-item\">\n            <input\n                type=\"checkbox\"\n                checked={props.completed}\n                onChange={() => props.handleChange(props.id)}>\n            </input>\n            {/*<span style={ props.completed ? completedStyle : null }>{props.title}</span>*/}\n            <span className= { props.completed ? \"completed-item\" : null }>{props.title}</span>\n            <button onClick={ () =>{  props.deleteTodoHandler(props.id) } }>Delete</button>\n        </li>\n    )\n}\n\nexport default TodoItem","import React from 'react';\nimport Header from \"./Header\";\nimport InputTodo from \"./InputTodo\"\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport { v4 as uuidv4 } from 'uuid';\n\n// class component\nclass TodoContainer extends React.Component {\n\n    state = {\n        todos: [\n            {\n                id: uuidv4(),\n\n                title: \"React lernen\",\n                completed: false\n            },\n            {\n                id: uuidv4(),\n                title: \"JavaScript auffrischen (Klassen, usw.)\",\n                completed: false\n            },\n            {\n                id: uuidv4(),\n                title: \"Props verstehen\",\n                completed: false\n            }\n\n        ]\n    }\n\n    onChangeCheckbox = (id) => {\n        const updatedTodosArr = this.state.todos.map(todo => {\n            if (todo.id === id) {\n                todo.completed = !todo.completed;\n            }\n            return todo;\n        })\n\n        // console.log(updatedTodosArr);\n\n\n        this.setState({\n            todos: updatedTodosArr\n        });\n    }\n\n\n    addToDoItem = (title) => {\n        console.log('add:', title);\n        \n        const newTodo = {\n            id: uuidv4(),\n            title: title,\n            completed: false\n        }\n        const updatedTodosArr =[...this.state.todos];\n        updatedTodosArr.unshift(newTodo);\n\n\n        // this.state.todos.push(newTodo);\n        this.setState({\n            todos: updatedTodosArr\n        });\n        console.log(updatedTodosArr);\n    }\n\n    deleteTodoHandler = (id) => {\n        console.log('delete item:', id);\n\n        const updatedTodoArr = this.state.todos.filter(todo => todo.id !== id);\n        console.log(updatedTodoArr);\n        // entfernt delete button\n        this.setState({\n            todos: updatedTodoArr\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Header />\n                <InputTodo addTodoItem={this.addToDoItem} />\n                <ul>\n                    {\n                        this.state.todos.map(todo => (\n                            <TodoItem\n                                key={todo.id}\n                                id={todo.id}\n                                title={todo.title}\n                                completed={todo.completed}\n                                handleChange={this.onChangeCheckbox}\n                                deleteTodoHandler={this.deleteTodoHandler}\n                            />\n                        ))\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\n// functional component\nconst TodoContainerFunction = (props) => {\n\n    return (\n        <div>\n            <h1>Hi, ich bin der TodoContainer!</h1>\n            <p>{props.text}</p>\n        </div>);\n};\n\nvoid TodoContainerFunction; //vermeidet warning\n\nexport default TodoContainer;","import React from 'react';\nimport TodoContainer from './components/TodoContainer';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContainer text=\"Mein Text kommt als property\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}